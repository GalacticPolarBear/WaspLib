{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

{$IFNDEF ANDREW_MUSHTREE_INCLUDED}
  {$I WaspLib/optional/interfaces/mainscreen/mushtree.simba}
{$ENDIF}

type
{$SCOPEDENUMS ON}
  EBirdHouseWood = (REGULAR, OAK, WILLOW, TEAK, MAPLE, MAHOGANY, YEW, MAGIC, REDWOOD);
  EBirdHouseLocation = (VALLEY_WEST, VALLEY_EAST, FOREST_NORTH, FOREST_SOUTH);
  EBirdHouseState = (UNKNOWN, NONE, EMPTY, FULL);

  TBirdHouse = record
    State: EBirdHouseState;
    Location: ERSMushTreeLocation;
    Obj: TRSObjectV2;
  end;

  TBirdHouseHandler = record(TSRLBaseRecord)
    CurrentLocation: EBirdHouseLocation;
    Houses: array [EBirdHouseLocation] of TBirdHouse;
    Wood: EBirdHouseWood;
    Seeds: TRSItem;

    Timer: TCountDown;

    OnStart, OnStop, IsFinished: function (): Boolean of object;

    Map: TRSMap; //TRSMap exclusive to the TBirdHouseHandler
  end;


function TBirdHouseHandler._IsFinished(): Boolean;
begin
  Result := Self.Map.GetRegionIndex() > 0;
end;

procedure TBirdHouseHandler._Setup();
const
  COORDINATES: TPointArray = [
    [10956, 35410],[10976, 35386], [10612, 34902], [10620, 35170]
  ];
var
  loc: EBirdHouseLocation;
  i: Int32;
begin
  if @Self.IsFinished = nil then
    Self.IsFinished := @Self._IsFinished;

  for loc := Low(EBirdHouseLocation) to High(EBirdHouseLocation) do
    with Self.Houses[loc] do
    begin
      i := Ord(loc);
      case i of
        0,1: Location :=  ERSMushTreeLocation.VERDANT_VALLEY;
        2,3: Location := ERSMushTreeLocation.MUSHROOM_MEADOW;
      end;

      Obj.SetupEx([0.8,0.8, 5], [COORDINATES[i]]);
      Obj.SetupUpText(['Space', 'house']);
      Obj.Finder.Colors := [CTS2(1191511, 8, 0.24, 4.86), CTS2(5266787, 21, 0.06, 0.15)];
      Obj.Walker := @Self.Map.Walker;
    end;
end;

procedure TBirdHouseHandler.InternalSetup(bmp: TMufasaBitmap);
var
  bounds: TBox;
  sizeMap, sizeBMP, sizeNew: TPoint;
begin
  Self.Map.Loader.Load([Chunk([56,61,60,57], 0), Chunk([58,60,58,60], 1)], 8, 80);

  //add map to our handler map regardless of where it came from, TRSMap or TRSWalker
  sizeMap := [Self.Map.Loader.Map.getWidth(), Self.Map.Loader.Map.getHeight()];
  sizeBMP := [bmp.getWidth(), bmp.getHeight()];

  //add just enought space to Loader.Map so we can fit bmp inside.
  if (sizeMap.X + sizeBMP.X) > (sizeMap.Y + sizeBMP.Y) then
  begin
    bounds := [sizeMap.X, 0, sizeMap.X + sizeBMP.X, sizeBMP.Y];
    Self.Map.Loader.Map.SetSize(bounds.X2, Max(sizeMap.Y, sizeBMP.Y));
  end
  else
  begin
    bounds := [0, sizeMap.Y, sizeBMP.X, sizeMap.Y + sizeBMP.Y];
    Self.Map.Loader.Map.SetSize(Max(sizeMap.X, sizeBMP.X), sizeMap.Y + sizeBMP.Y);
  end;

  //Draw bmp onto Loader.Map and update the other bitmaps so everything works well
  sizeNew := [Self.Map.Loader.Map.getWidth(), Self.Map.Loader.Map.getHeight()];
  Self.Map.Loader.Map.DrawBitmap(bmp, [bounds.X1, bounds.Y1]);
  Self.Map.Loader.Map.Downsample(Self.Map.Loader.Downscale, Self.Map.Loader.DownscaledMap);
  Self.Map.Loader.Heightmap.SetSize(sizeNew.X, sizeNew.Y);
  Self.Map.Loader.Collision.SetSize(sizeNew.X, sizeNew.Y);

  //add a arbitary region and update other maps sizes so other stuff works well
  Self.Map.Loader.Regions += ['External', bounds, bounds, 0, Point(0,0)];

  Self.Map.InternalSetup();
end;

procedure TBirdHouseHandler.Setup(map: PRSMap; wood: EBirdHouseWood; seeds: TRSItem);
begin
  Self.InternalSetup(map^.Loader.Map);

  Self.Wood := wood;
  Self.Seeds := seeds;

  Self._Setup();
end;

procedure TBirdHouseHandler.Setup(map: PRSWalker; wood: EBirdHouseWood; seeds: TRSItem); overload;
begin
  Self.InternalSetup(map^.Map.Map);

  Self.Wood := wood;
  Self.Seeds := seeds;

  Self._Setup();
end;

procedure TBirdHouseHandler.Setup(wood: EBirdHouseWood; seeds: TRSItem); overload;
begin
  Self.Map.Loader.Load([Chunk([56,61,60,57], 0), Chunk([58,60,58,60], 1)], 8, 80);
  Self.Map.InternalSetup();

  Self.Wood := wood;
  Self.Seeds := seeds;

  Self._Setup();
end;


procedure TBirdHouseHandler.Start();
begin
  if @Self.OnStart <> nil then Self.OnStart();
  MushTree.Mushrooms.Walker := @Self.Map.Walker;
end;

procedure TBirdHouseHandler.Stop();
begin
  if @Self.OnStop <> nil then Self.OnStop();
  MushTree.Mushrooms.Walker := @System.Map.Walker;
end;


var
  BirdHouseHandler: TBirdHouseHandler;
{$SCOPEDENUMS OFF}

(*
//EXAMPLE TEST OF SHOWING THE MAPS JOINED TOGETHER BETWEEN TRSWALKER AND TRSMAP

var
  rsw: TRSWalker;
begin
  rsw.SetupRegion(RSRegions.ARDOUGNE);
  BirdHouseHandler.Setup(@rsw, EBirdHouseWood.MAHOGANY, 'Guam seed');
  BirdHouseHandler.Map.Debug();
end.
*)
