(*
# HouseMap
The HouseMap is what's responsible for mapping a user's POH (Player owned house).
*)

{$DEFINE WL_HOUSEMAP_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
  {$SCOPEDENUMS ON}
{$ENDIF}

{$IFNDEF WL_HOUSEUTILS_INCLUDED}
  {$I WaspLib/optional/handlers/house/houseutils.simba}
{$ENDIF}

type
(*
(THouseMap)=
## type THouseMap
```pascal
type
  THouseMap = record
    AMOUNT, SIZE: Int32;
    Map: TMufasaBitmap;

    Rooms: array of array of THouseRoom;

    //helpers:
    TeleportRooms: array of array of TTeleportRoom;

    RoomsBitmap, IconBitmap: TMufasaBitmap;
    RoomBitmaps, IconBitmaps: array [EHouseRoom] of TMufasaBitmap;

    Selected: record
      Matrix, Map: TPoint;
    end;
    HouseBounds: TBox;

    Decoration: EHouseDecoration;
    Colors: record
      Outdoors, Indoors, Dungeon: Int32;
    end;
    Config: TConfigJSON;
  end;
```
Helper record used by the {ref}`THouseHandler`.
All `THouseMap` methods are helper methods for the {ref}`THouseHandler` and you shouldn't have to call them for anything.
*)
  THouseMap = record
    AMOUNT, SIZE, Downscale: Int32;
    Map, DownscaledMap: TMufasaBitmap;

    Rooms: array of array of THouseRoom;

    //helpers:
    TeleportRooms: array of array of TTeleportRoom;

    RoomsBitmap, IconBitmap: TMufasaBitmap;
    RoomBitmaps, IconBitmaps: array [EHouseRoom] of TMufasaBitmap;

    Selected: record
      Matrix, Map: TPoint;
    end;
    HouseBounds: TBox;

    Decoration: EHouseDecoration;
    Colors: THouseColor;
    Config: TConfigJSON;
  end;

(*
## THouseMap.Free()
```pascal
procedure THouseMap.Free();
```
Internal method automatically called for your on script termination.
You do not have to call it yourself.
*)
procedure THouseMap.Free();
var
  room: EHouseRoom;
begin
  Self.Map.Free();
  Self.DownscaledMap.Free();
  Self.RoomsBitmap.Free();
  Self.IconBitmap.Free();
  for room := Low(EHouseRoom) to High(EHouseRoom) do
  begin
    if Self.RoomBitmaps[room] <> nil then Self.RoomBitmaps[room].Free();
    if Self.IconBitmaps[room] <> nil then Self.IconBitmaps[room].Free();
  end;

  Self.Rooms := [];
end;

function THouseMap.ToEncodedString(): String; forward;
procedure THouseMap.LoadFromString(s: String); forward;
procedure THouseMap.DrawMap(room: THouseRoom; p: TPoint); forward;

procedure THouseMap.SetColors(decoration: EHouseDecoration);
begin
  Self.Decoration := decoration;
  Self.Colors := decoration.GetColors();
end;

(*
## THouseMap.Init()
```pascal
procedure THouseMap.Init(size, amount: Int32);
```
Internal method automatically called for your when you use `TScriptForm.CreateHouseBuilder()`.
You don't usually have to call it yourself.
*)
procedure THouseMap.Init(size, amount: Int32);
begin
  Self.Config.Setup('pohhandler');

  if not Self.Config.Has('size') then Self.Config.Put('size', size);
  if not Self.Config.Has('amount') then Self.Config.Put('amount', amount);

  Self.SIZE := Self.Config.GetInt('size');
  Self.AMOUNT := Self.Config.GetInt('amount');

  Self.Selected.Map := [Self.AMOUNT div 2 * Self.SIZE, Self.AMOUNT div 2 * Self.SIZE];
  Self.Selected.Matrix := [Self.AMOUNT div 2, Self.AMOUNT div 2];
  Self.HouseBounds := [Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2, Self.AMOUNT div 2];

  Self.Map.Init();
  Self.Map.SetSize(Self.SIZE * Self.AMOUNT, Self.SIZE * Self.AMOUNT);
  Self.DownscaledMap.Init();

  Self.RoomsBitmap.Init();
  Self.RoomsBitmap.LoadFromFile(WALKER_DIR + 'house.png');

  Self.IconBitmap.Init();
  Self.IconBitmap.LoadFromFile(WALKER_DIR + 'house_icons.png');

  AddOnTerminate(@Self.Free);

  SetLength(Self.Rooms, Self.AMOUNT, Self.AMOUNT);
  SetLength(Self.TeleportRooms, Self.AMOUNT, Self.AMOUNT);

  if Self.Config.Has('layout') then
    Self.LoadFromString(Self.Config.GetString('layout'))
  else
  begin
    Self.SetColors(EHouseDecoration.WOOD);
    Self.DrawMap([EHouseRoom.GARDEN, 0, []], [Self.AMOUNT div 2, Self.AMOUNT div 2]);
  end;
end;

procedure THouseMap.Setup(downscale: Int32);
begin
  Self.Downscale := downscale;
  Self.Map.Downsample(Self.Downscale, Self.DownscaledMap);
end;


function THouseMap.GetColor(room: EHouseRoom): Int32;
begin
  if room.IsOutdoors() then Exit(Self.Colors.Outdoors);
  Result := Self.Colors.Indoors;
end;

(*
## THouseMap.GetRoomBitmapBox()
```pascal
function THouseMap.GetRoomBitmapBox(room: EHouseRoom): TBox;
```
Internal method used to get the box of the {ref}`EHouseRoom` you pass in.

This box is a box of the following image:

![poh rooms](../../../osr/walker/poh.png)

Example:
```pascal
{$I WaspLib/optional/handlers/poh.simba}
begin
  WriteLn POH.Map.GetRoomBitmapBox(EHouseRoom.SUPERIOR_GARDEN);
end;
```
*)
function THouseMap.GetRoomBitmapBox(room: EHouseRoom): TBox;
var
  i: Int32;
begin
  i := Ord(room);
  Result := [i * Self.SIZE, 0, i * Self.SIZE + Self.SIZE - 1, Self.SIZE-1];
end;

(*
## THouseMap.GetRoomBitmap()
```pascal
function THouseMap.GetRoomBitmap(room: EHouseRoom; color: Int32 = -1): TMufasaBitmap;
```
Internal method used to retrieve a bitmap of the {ref}`EHouseRoom` you pass in.

Example:
```pascal
{$I WaspLib/optional/handlers/poh.simba}
var
  bmp: TMufasaBitmap;
begin
  bmp := POH.Map.GetRoomBitmap(EHouseRoom.SUPERIOR_GARDEN);
  bmp.Debug();
  bmp.Free();
end;
```
*)
function THouseMap.GetRoomBitmap(room: EHouseRoom): TMufasaBitmap;
var
  b: TBox;
begin
  if Self.RoomBitmaps[room] = nil then
  begin
    b := Self.GetRoomBitmapBox(room);
    Result := Self.RoomsBitmap.Copy(b.X1, b.Y1, b.X2, b.Y2);
    Self.RoomBitmaps[room] := Result.Copy();
  end
  else
    Result := Self.RoomBitmaps[room].Copy();

  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;

function THouseMap.GetIconBitmap(room: EHouseRoom): TMufasaBitmap;
var
  b: TBox;
begin
  if Self.IconBitmaps[room] = nil then
  begin
    b := Self.GetRoomBitmapBox(room);
    Result := Self.IconBitmap.Copy(b.X1, b.Y1, b.X2, b.Y2);
    Self.IconBitmaps[room] := Result.Copy();
  end
  else
    Result := Self.IconBitmaps[room].Copy();

  Result.ReplaceColor($FFFFFF, Self.GetColor(room));
end;


(*
## THouseMap.WriteRoom()
```pascal
procedure THouseMap.WriteRoom(room: EHouseRoom; index: TPoint);
```
Internal method used to write a room to `THouseMap.Rooms` cache.
This uses an `TPoint` as a room `index` in a 2D array of {ref}`EHouseRoom`.

Unless you know what you are doing, you definitly should not use this for anything.

Example:
```pascal
POH.Map.WriteRoom(EHouseRoom.SUPERIOR_GARDEN, [3,3]);
```
*)
procedure THouseMap.WriteRoom(room: THouseRoom; index: TPoint);
begin
  Self.Rooms[index.Y,index.X] := room;
  case room.Room of
    EHouseRoom.PORTAL_CHAMBER, EHouseRoom.SUPERIOR_GARDEN, EHouseRoom.PORTAL_NEXUS:;
    else Self.TeleportRooms[index.Y,index.X] := [];
  end;
  Self.Config.Put('layout', Self.ToEncodedString());
end;

(*
## THouseMap.ReadRoom()
```pascal
function THouseMap.ReadRoom(index: TPoint): EHouseRoom;
```
Internal method used to read a cached room in `THouseMap.Rooms`.
This uses an `TPoint` as a room `index`.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

Example:
```pascal
WriteLn POH.Map.ReadRoom([3,3]);
```
*)
function THouseMap.ReadRoom(index: TPoint): THouseRoom;
begin
  Result := Self.Rooms[index.Y,index.X];
end;

(*
## THouseMap.PrintRooms()
```pascal
procedure THouseMap.PrintRooms();
```
Debugging helper method used to read a cached rooms in `THouseMap.Rooms`.
This will print the whole cache nicely formated in a way that is human friendly like you were looking at the house map.

Unless you know what you are doing, you don't need this, but there's no harm in using it.

```{note}
:class: dropdown
It's a extremely useful debugging tool when paired with `POH.Map.Map.Debug()`.
```

Example:
```pascal
POH.Setup();
POH.Map.PrintRooms();
```
*)
procedure THouseMap.PrintRooms();
var
  str: String;
  i, j: Int32;
begin
  str := '[' + LineEnding;
  for i := 0 to High(Self.Rooms) do
  begin
    for j := 0 to High(Self.Rooms[i]) do
    begin
      if j = 0 then
      begin
        str += '  [';
      end;
        str += ToStr(Self.Rooms[i][j]);
      if j < High(Self.Rooms[i]) then
        str += ', ';
    end;
      str += ', ' + LineEnding;
  end;
  str += ']';
  WriteLn str;
end;


(*
## THouseMap.DrawMap()
```pascal
procedure THouseMap.DrawMap(bmp: TMufasaBitmap; room: EHouseRoom; p: TPoint);
procedure THouseMap.DrawMap(room: EHouseRoom; color: Int32; p: TPoint); overload;
```
Methods used to draw the POH map and cache the rooms drawn in `THouseMap.Rooms`.

Example:
```pascal
POH.Map.DrawMap(EHouseRoom.SUPERIOR_GARDEN, POH.GrassColor, [3,3]);
POH.Map.Debug();
POH.Map.PrintRooms();
```
*)
procedure THouseMap.DrawMap(bmp: TMufasaBitmap; room: THouseRoom; index: TPoint); overload;
var
  tmp: TMufasaBitmap;
begin
  Self.WriteRoom(room, index);

  tmp := bmp.RotateClockWise(room.Rotation);
  Self.Map.DrawBitmap(tmp, [Self.SIZE * index.X, Self.SIZE * index.Y]);
  tmp.Free();
  bmp.Free();

  if (index.X > Self.HouseBounds.X1) and (index.X < Self.HouseBounds.X2) and
     (index.Y > Self.HouseBounds.Y1) and (index.Y < Self.HouseBounds.Y2) then
    Exit;

  if index.X <= Self.HouseBounds.X1 then Self.HouseBounds.X1 := index.X-1;
  if index.X >= Self.HouseBounds.X2 then Self.HouseBounds.X2 := index.X+1;
  if index.Y <= Self.HouseBounds.Y1 then Self.HouseBounds.Y1 := index.Y-1;
  if index.Y >= Self.HouseBounds.Y2 then Self.HouseBounds.Y2 := index.Y+1;

  tmp := Self.GetRoomBitmap(EHouseRoom.UNKNOWN);
  for index.Y := Max(Self.HouseBounds.Y1, 0) to Min(Self.HouseBounds.Y2, Self.AMOUNT-1) do
    for index.X := Max(Self.HouseBounds.X1, 0) to Min(Self.HouseBounds.X2, Self.AMOUNT-1) do
    begin
      if Self.ReadRoom(index).Room <> EHouseRoom.UNKNOWN then Continue;
      Self.Map.DrawBitmap(tmp, [Self.SIZE * index.X, Self.SIZE * index.Y]);
    end;
  tmp.Free();
end;

procedure THouseMap.DrawMap(room: THouseRoom; p: TPoint);
var
  bmp: TMufasaBitmap;
begin
  bmp := Self.GetRoomBitmap(room.Room);
  Self.DrawMap(bmp, room, p);
end;


procedure THouseMap.Redraw();
var
  bmp, tmp: TMufasaBitmap;
  index: TPoint;
  room: THouseRoom;
begin
  for index.Y := Max(Self.HouseBounds.Y1, 0) to Min(Self.HouseBounds.Y2, Self.AMOUNT-1) do
    for index.X := Max(Self.HouseBounds.X1, 0) to Min(Self.HouseBounds.X2, Self.AMOUNT-1) do
    begin
      room := Self.ReadRoom(index);
      bmp := Self.GetRoomBitmap(room.Room);

      tmp := bmp.RotateClockWise(room.Rotation);
      Self.Map.DrawBitmap(tmp, [Self.SIZE * index.X, Self.SIZE * index.Y]);
      tmp.Free();
      bmp.Free();
    end;
end;


function THouseMap.ToEncodedString(): String;
var
  idx: TPoint;
  room: THouseRoom;
  str, teleports: String;
  o: EHouseObject;
  troom: TTeleportRoom;
begin
  Result := '[' + ToStr(Ord(Self.Decoration)) +']';
  for idx.Y := 0 to Self.AMOUNT-1 do
    for idx.X := 0 to Self.AMOUNT-1 do
    begin
      room := Self.ReadRoom(idx);

      for o in room.Objects do str += ToStr(Ord(o)) + ' ';
      str := str.Trim();

      case room.Room of
        EHouseRoom.PORTAL_CHAMBER, EHouseRoom.SUPERIOR_GARDEN, EHouseRoom.PORTAL_NEXUS:
        begin
          troom := Self.TeleportRooms[idx.Y, idx.X];
          teleports := '(' + ToStr(Ord(troom.Left)) + ' ' +
                           ToStr(Ord(troom.Middle)) + ' ' +
                           ToStr(Ord(troom.Right)) +
                     ')';
        end;
      end;

      Result += '[' + ToStr(idx.X) + ' ' + ToStr(idx.Y) + ' ' + ToStr(Ord(room.Room)) + ' ' +  ToStr(room.Rotation);
      if str <> '' then Result += ' ' + str;
      if teleports <> '' then Result += ' ' + teleports;
      Result += ']';

      str := '';
      teleports := '';
    end;

  Result := Base64Encode(CompressString(Result));
end;

procedure THouseMap.LoadFromString(s: String);
var
  idx: TPoint;
  elements, values: TStringArray;
  i, j: Int32;
  room: THouseRoom;
  main, portals: String;
begin
  elements := MultiBetween(DecompressString(Base64Decode(s)), '[', ']');

  if elements <> [] then
    Self.SetColors(EHouseDecoration(StrToInt(elements[0])));

  for i := 1 to High(elements) do
  begin
    if elements[i].Contains(' (') then
    begin
      main := elements[i].Before(' (');
      portals := elements[i].Between('(', ')');
    end
    else
    begin
      main := elements[i];
      portals := '';
    end;

    values := Explode(' ', main);
    idx := [StrToInt(values[0]), StrToInt(values[1])];

    room.Room := EHouseRoom(StrToInt(values[2]));
    room.Rotation := StrToInt(values[3]);

    room.Objects := [];
    for j := 4 to High(values) do
      room.Objects += EHouseObject(StrToInt(values[j]));

    case room.Room of
      EHouseRoom.UNKNOWN: ;
      EHouseRoom.PORTAL_CHAMBER, EHouseRoom.SUPERIOR_GARDEN, EHouseRoom.PORTAL_NEXUS:
      begin
        values := Explode(' ', portals);

        Self.TeleportRooms[idx.Y, idx.X] := [
          EHouseTeleport(StrToInt(values[0])),
          EHouseTeleport(StrToInt(values[1])),
          EHouseTeleport(StrToInt(values[2]))
        ];

        Self.DrawMap(room, idx);
      end;
      else Self.DrawMap(room, idx);
    end;
  end;
end;
