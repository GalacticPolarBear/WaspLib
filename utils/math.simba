(*
# Math
This file has math related methods.
*)

{$DEFINE WL_MATH_INCLUDED}
{$IFNDEF WL_UTILS}
  {$I WaspLib/utils.simba}
{$ENDIF}

(*
## Double.GetDigit
```pascal
function Double.GetDigit(n: Int32): Int32;
function Double.GetDigit(n: Int64): Int64; overload;
```
Get the digit at the **n** place of the Double.

Example:
```pascal
var
  BioHash := 0.0123456789;
begin
  WriteLn BioHash.GetDigit(4); //will print 3
end;
```
*)
function Double.GetDigit(n: Int32): Int32;
var
  s: String;
begin
  s := ToStr(Self).Replace('.', '');
  Result := StrToInt(s[n+1]);
end;

function Double.GetDigit(n: Int64): Int64; overload;
var
  s: String;
begin
  s := ToStr(Self).Replace('.', '');
  Result := StrToInt64(s[n+1]);
end;

(*
## NumberPerHour
```pascal
function NumberPerHour(n: Int64): Int32;
function NumberPerHour(n: Double): Int32; overload;
```

Calculate how many **n** per hour. You can optionally specify the amount of **time** to use in the calculation.

Example:
```pascal
WriteLn NumberPerHour(10000, 2 * ONE_HOUR); //will print 5000.
```
*)
function NumberPerHour(n: Int64; time: UInt64 = -1): Int32;
begin
  if time = -1 then
    time := GetTimeRunning();

  Result := Round(n / time * ONE_HOUR);
end;

function NumberPerHour(n: Double; time: UInt64 = -1): Double; overload;
begin
  if time = -1 then
    time := GetTimeRunning();

  Result := n / time * ONE_HOUR;
end;
